stages:
  - test
  - build
  - release

services:
  - docker:20.10.7-dind
  - postgres:latest

variables:
  DB_NAME: mytestdb
  DB_USER: mytestuser
  DB_PASSWORD: mytestpassword

# https://blog.callr.tech/building-docker-images-with-gitlab-ci-best-practices/


build_test_db:
  image: postgres
  script:
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"

Test:
  stage: test
  image: python:3.10-bullseye  # adjust the Python version as necessary
  needs:
    - [ "build_test_db" ]
  before_script:
    - |
      apt-get update && apt-get install -y --no-install-recommends \
      gcc \
      musl-dev \
      python3-dev \
      libpq-dev \
      libgnutls28-dev \
      git \
      && rm -rf /var/lib/apt/lists/*
    - python -m pip install --upgrade pip
    - pip install uwsgi
    - pip install -r requirements.txt
    - mkdir /var/log/finmars
    - mkdir /var/log/finmars/backend
  script:
    - DB_HOST=postgres python manage.py test

Build:
  stage: build
  script:
    # fetches the latest image (not failing if image is not found)
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin registry.finmars.com
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --pull --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME

Release latest:
  variables:
    # We are just playing with Docker here.
    # We do not need GitLab to clone the source code.
    GIT_STRATEGY: none
  stage: release
  only:
    # Only "master" should be tagged "latest"
    - master
  script:
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin registry.finmars.com
    # Because we have no guarantee that this job will be picked up by the same runner
    # that built the image in the previous step, we pull it again locally
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    # Then we tag it "latest"
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME $CI_REGISTRY_IMAGE:latest
    # Annnd we push it.
    - docker push $CI_REGISTRY_IMAGE:latest

Release version:
  variables:
    # Again, we do not need the source code here. Just playing with Docker.
    GIT_STRATEGY: none
  stage: release
  only:
    # We want this job to be run on tags only.
    - tags
  script:
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin registry.finmars.com
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
