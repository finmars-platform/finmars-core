name: CI Versioning & Build

on:
  push:
    branches:
      - '*'

permissions:
  contents: write 

jobs:
  lint:
    name: Lint Python Code
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Some linters
        run: echo "Some linters"


  test:
    name: Run Python Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Some tests
        run: echo "Some tests"

  versioning:
    name: Bump Patch Version
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - uses: actions/checkout@v4

      - name: Fetch tags
        run: git fetch --tags

      - name: Get latest version
        id: get_tag
        run: |
          latest_tag=$(git tag --sort=-v:refname | head -n1)
          echo "Latest tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Calculate new patch version
        id: bump_patch
        run: |
          latest_tag=${{ steps.get_tag.outputs.latest_tag }}
          IFS='-' read -r version suffix <<< "$latest_tag"
          IFS='.' read -r major minor patch <<< "${version}"
          patch=$((patch + 1))
          new_version="$major.$minor.$patch-rc"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Create tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ steps.bump_patch.outputs.new_version }}
          git push origin ${{ steps.bump_patch.outputs.new_version }}

    outputs:
      new_version: ${{ steps.bump_patch.outputs.new_version }}

  release:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: versioning

    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Registry
        run: echo "${{ secrets.CI_REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.CI_REGISTRY_USER }}" --password-stdin git.finmars.com:5050

      - name: Build image
        run: |
          TAG="${{ needs.versioning.outputs.new_version }}"
          docker build --pull --no-cache -t ${{ secrets.CI_REGISTRY_IMAGE }}:$TAG .

      - name: Push image
        run: |
          TAG="${{ needs.versioning.outputs.new_version }}"
          docker push ${{ secrets.CI_REGISTRY_IMAGE }}:$TAG

  publish:
    name: Publish Version Info on License Server
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y curl git

      - name: Push version info
        run: |
          if [[ "${{ needs.versioning.outputs.new_version }}" == *"-rc" ]]; then
              CHANNEL="rc"
          elif [[ "$${{ needs.versioning.outputs.new_version }}" == *"-stable" ]]; then
              CHANNEL="stable"
          else
              CHANNEL="unknown"
          fi

          NOTES=$(git log -1 --pretty=%f)
          JSON_PAYLOAD="{ \"app\": \"backend\", \"version\": \"${{ needs.versioning.outputs.new_version }}\", \"build_number\": ${{ github.run_id }}, \"notes\": \"$NOTES\", \"channel\": \"$CHANNEL\" }"

          echo "Sending: $JSON_PAYLOAD"
          status_code=$(curl -o /dev/null -s -w "%{http_code}" -X POST https://license.finmars.com/api/v1/version/ -H "Content-Type: application/json" -d "$JSON_PAYLOAD")

          if [[ "$status_code" -ne "201" ]]; then
            echo "Push version failed, http status: $status_code"
            exit 6
          fi

          echo "Push version succeeded."
