name: CI Versioning & Build

on:
  push:
    branches:
      - '*'

permissions:
  contents: write 



jobs:
  lint:
    name: Lint Python Code
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Some linters
        run: echo "Some linters"

  test:
    name: Run Python Tests
    runs-on: ubuntu-latest

    env:
      DB_NAME: test_db
      DB_USER: postgres
      DB_PASSWORD: postgres
      # DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
      RABBITMQ_USER: test_finmars_user
      RABBITMQ_PASSWORD: test_finmars_password

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      rabbitmq:
        image: rabbitmq:3.13-management-alpine
        env:
          RABBITMQ_DEFAULT_USER: test_finmars_user
          RABBITMQ_DEFAULT_PASS: test_finmars_password
        ports: [5672:5672]
      redis:
        image: redis:7-alpine
        ports: [6379:6379]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements-test.txt

      # - name: Run migrations
      #   run: python manage.py migrate

      - name: Run tests
        run: coverage run --parallel-mode manage.py test --parallel auto

  versioning:
    name: Bump Patch Version
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - uses: actions/checkout@v4

      - name: Fetch tags
        run: git fetch --tags

      - name: Get latest version
        id: get_tag
        run: |
          latest_tag=$(git tag --sort=-v:refname | head -n1)
          echo "Latest tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Calculate new patch version
        id: bump_patch
        run: |
          latest_tag=${{ steps.get_tag.outputs.latest_tag }}
          IFS='-' read -r version suffix <<< "$latest_tag"
          IFS='.' read -r major minor patch <<< "${version}"
          patch=$((patch + 1))
          new_version="$major.$minor.$patch-rc"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Create tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ steps.bump_patch.outputs.new_version }}
          git push origin ${{ steps.bump_patch.outputs.new_version }}

    outputs:
      new_version: ${{ steps.bump_patch.outputs.new_version }}

  release:
    needs: versioning
    uses: ./.github/workflows/docker.yml
    with:
      version: ${{ needs.versioning.outputs.new_version }}
    secrets:
      CI_REGISTRY_USER: ${{ secrets.CI_REGISTRY_USER }}
      CI_REGISTRY_PASSWORD: ${{ secrets.CI_REGISTRY_PASSWORD }}
      CI_REGISTRY_IMAGE: ${{ secrets.CI_REGISTRY_IMAGE }}

  publish:
    needs: [release, versioning]
    uses: ./.github/workflows/publish_version.yml
    with:
      version: ${{ needs.versioning.outputs.new_version }}
      build_number: ${{ github.run_number }}
      notes: ${{ github.event.head_commit.message }}
