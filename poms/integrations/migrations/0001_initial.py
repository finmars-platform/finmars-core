# Generated by Django 4.1.3 on 2022-12-07 21:41

import datetime
from django.db import migrations, models
import django.utils.timezone
import poms.integrations.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AccountClassifierMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255, verbose_name='value')),
            ],
            options={
                'verbose_name': 'account classifier mapping',
                'verbose_name_plural': 'account classifier mappings',
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AccountMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255, verbose_name='value')),
            ],
            options={
                'verbose_name': 'account mapping',
                'verbose_name_plural': 'account mappings',
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AccountTypeMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255, verbose_name='value')),
            ],
            options={
                'verbose_name': 'account type mapping',
                'verbose_name_plural': 'account type mappings',
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AccrualCalculationModelMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255, verbose_name='value')),
            ],
            options={
                'verbose_name': 'accrual calculation model mapping',
                'verbose_name_plural': 'accrual calculation model  mappings',
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AccrualScheduleDownloadMethod',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('user_code', models.CharField(max_length=255, unique=True, verbose_name='user code')),
                ('name', models.CharField(blank=True, default='', max_length=255, verbose_name='name')),
                ('name_en', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='name')),
                ('short_name', models.CharField(blank=True, default='', max_length=255, verbose_name='short name')),
                ('description', models.TextField(blank=True, default='', verbose_name='description')),
                ('description_en', models.TextField(blank=True, default='', null=True, verbose_name='description')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BloombergDataProviderCredential',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('modified', models.DateTimeField(auto_now=True, db_index=True, verbose_name='modified')),
                ('is_valid', models.BooleanField(default=False, verbose_name='is valid')),
                ('p12cert', models.TextField(blank=True, default='', verbose_name='File URL')),
                ('password', models.CharField(blank=True, max_length=64, null=True, verbose_name='password')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ComplexTransactionImportScheme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('short_name', models.TextField(blank=True, null=True, verbose_name='short name')),
                ('public_name', models.CharField(blank=True, help_text='used if user does not have permissions to view object', max_length=255, null=True, verbose_name='public name')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('is_enabled', models.BooleanField(db_index=True, default=True, verbose_name='is enabled')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, null=True, verbose_name='created')),
                ('modified', models.DateTimeField(auto_now=True, db_index=True, verbose_name='modified')),
                ('user_code', models.CharField(blank=True, max_length=255, null=True, verbose_name='user code')),
                ('book_uniqueness_settings', models.PositiveSmallIntegerField(choices=[(1, 'Skip'), (2, 'Book without Unique Code '), (3, 'Overwrite'), (4, 'Treat as error')], default=1, verbose_name='book uniqueness settings')),
                ('rule_expr', models.CharField(max_length=4096, verbose_name='rule expressions')),
                ('recon_layout_json', models.TextField(blank=True, null=True, verbose_name='recon layout json')),
                ('delimiter', models.CharField(choices=[[',', 'Comma'], [';', 'Semicolon'], ['\t', 'Tab']], default=',', max_length=255)),
                ('error_handler', models.CharField(choices=[['break', 'Break'], ['continue', 'Continue']], default='break', max_length=255)),
                ('missing_data_handler', models.CharField(choices=[['throw_error', 'Treat as Error'], ['set_defaults', 'Replace with Default Value']], default='throw_error', max_length=255)),
                ('spreadsheet_start_cell', models.CharField(default='A1', max_length=255)),
                ('spreadsheet_active_tab_name', models.CharField(blank=True, default='', max_length=255, null=True)),
                ('column_matcher', models.CharField(choices=[['index', 'Index'], ['name', 'Name']], default='index', max_length=255)),
                ('filter_expression', models.CharField(blank=True, max_length=255, null=True, verbose_name='filter expression')),
                ('has_header_row', models.BooleanField(default=True, verbose_name='has header row')),
                ('data_preprocess_expression', models.CharField(blank=True, default='', max_length=4096, null=True, verbose_name='data preprocess expression')),
            ],
            options={
                'verbose_name': 'complex transaction import scheme',
                'verbose_name_plural': 'complex transaction import schemes',
            },
        ),
        migrations.CreateModel(
            name='ComplexTransactionImportSchemeCalculatedInput',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('column', models.SmallIntegerField()),
                ('name_expr', models.CharField(default='', max_length=4096, verbose_name='name expression')),
            ],
            options={
                'verbose_name': 'complex transaction import scheme calculated input',
                'verbose_name_plural': 'complex transaction import scheme calculated inputs',
            },
        ),
        migrations.CreateModel(
            name='ComplexTransactionImportSchemeField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value_expr', models.CharField(max_length=4096, verbose_name='value expression')),
            ],
            options={
                'verbose_name': 'complex transaction import scheme field',
                'verbose_name_plural': 'complex transaction import scheme fields',
            },
        ),
        migrations.CreateModel(
            name='ComplexTransactionImportSchemeInput',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('column', models.SmallIntegerField()),
                ('column_name', models.CharField(blank=True, max_length=255, null=True)),
                ('name_expr', models.CharField(default='', max_length=4096, verbose_name='name expression')),
            ],
            options={
                'verbose_name': 'complex transaction import scheme input',
                'verbose_name_plural': 'complex transaction import scheme inputs',
            },
        ),
        migrations.CreateModel(
            name='ComplexTransactionImportSchemeReconField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference_name', models.CharField(max_length=255, verbose_name='reference name ')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('value_string', models.CharField(max_length=4096, verbose_name='value string')),
                ('value_float', models.CharField(max_length=4096, verbose_name='value float')),
                ('value_date', models.CharField(max_length=4096, verbose_name='value date')),
            ],
        ),
        migrations.CreateModel(
            name='ComplexTransactionImportSchemeReconScenario',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='name')),
                ('line_reference_id', models.CharField(max_length=4096, verbose_name='line reference id')),
                ('reference_date', models.CharField(max_length=4096, verbose_name='reference_date')),
            ],
            options={
                'verbose_name': 'complex transaction import scheme recon scenario',
                'verbose_name_plural': 'complex transaction import scheme recon scenarios',
            },
        ),
        migrations.CreateModel(
            name='ComplexTransactionImportSchemeRuleScenario',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_default_rule_scenario', models.BooleanField(default=False, verbose_name='is default rule scenario')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'complex transaction import scheme rule scenario',
                'verbose_name_plural': 'complex transaction import scheme rules scenarios',
            },
        ),
        migrations.CreateModel(
            name='ComplexTransactionImportSchemeSelectorValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=1000, verbose_name='value ')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('order', models.IntegerField(default=0, verbose_name='order')),
            ],
        ),
        migrations.CreateModel(
            name='CounterpartyClassifierMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255, verbose_name='value')),
            ],
            options={
                'verbose_name': 'responsible classifier mapping',
                'verbose_name_plural': 'responsible classifier mappings',
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CounterpartyMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255, verbose_name='value')),
            ],
            options={
                'verbose_name': 'counterparty mapping',
                'verbose_name_plural': 'counterparty mappings',
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CurrencyMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255, verbose_name='value')),
            ],
            options={
                'verbose_name': 'currency mapping',
                'verbose_name_plural': 'currency mappings',
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DailyPricingModelMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255, verbose_name='value')),
            ],
            options={
                'verbose_name': 'daily pricing model mapping',
                'verbose_name_plural': 'daily pricing model mappings',
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataProvider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('user_code', models.CharField(blank=True, max_length=255, null=True, verbose_name='user code')),
                ('notes', models.TextField(blank=True, default='', verbose_name='notes')),
            ],
        ),
        migrations.CreateModel(
            name='FactorScheduleDownloadMethod',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('user_code', models.CharField(max_length=255, unique=True, verbose_name='user code')),
                ('name', models.CharField(blank=True, default='', max_length=255, verbose_name='name')),
                ('name_en', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='name')),
                ('short_name', models.CharField(blank=True, default='', max_length=255, verbose_name='short name')),
                ('description', models.TextField(blank=True, default='', verbose_name='description')),
                ('description_en', models.TextField(blank=True, default='', null=True, verbose_name='description')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ImportConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('p12cert', models.TextField(blank=True, default='', verbose_name='p12cert')),
                ('password', models.CharField(blank=True, max_length=64, null=True, verbose_name='password')),
                ('cert', models.TextField(blank=True, default='', verbose_name='cert')),
                ('key', models.TextField(blank=True, default='', verbose_name='key')),
                ('is_valid', models.BooleanField(default=False, verbose_name='is valid')),
            ],
            options={
                'verbose_name': 'import config',
                'verbose_name_plural': 'import configs',
            },
        ),
        migrations.CreateModel(
            name='InstrumentAttributeValueMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255, verbose_name='value')),
                ('value_string', models.CharField(blank=True, default='', max_length=255, verbose_name='value (String)')),
                ('value_float', models.FloatField(default=0.0, verbose_name='value (Float)')),
                ('value_date', models.DateField(default=datetime.date(1, 1, 1), verbose_name='value (Date)')),
            ],
            options={
                'verbose_name': 'instrument attribute value mapping',
                'verbose_name_plural': 'instrument attribute value mappings',
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InstrumentClassifierMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255, verbose_name='value')),
            ],
            options={
                'verbose_name': 'instrument classifier mapping',
                'verbose_name_plural': 'instrument classifier mappings',
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InstrumentDownloadScheme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('short_name', models.TextField(blank=True, null=True, verbose_name='short name')),
                ('public_name', models.CharField(blank=True, help_text='used if user does not have permissions to view object', max_length=255, null=True, verbose_name='public name')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('is_enabled', models.BooleanField(db_index=True, default=True, verbose_name='is enabled')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, null=True, verbose_name='created')),
                ('modified', models.DateTimeField(auto_now=True, db_index=True, verbose_name='modified')),
                ('mode', models.CharField(choices=[['skip', 'Skip if exists'], ['overwrite_empty_values', 'Overwrite only empty values'], ['overwrite', 'Overwrite']], default='skip', max_length=255)),
                ('user_code', models.CharField(blank=True, max_length=255, null=True, verbose_name='user code')),
                ('reference_for_pricing', models.CharField(blank=True, default='', max_length=255, verbose_name='reference for pricing')),
                ('instrument_user_code', models.CharField(blank=True, default='', max_length=4096, verbose_name='user code')),
                ('instrument_name', models.CharField(max_length=4096, verbose_name='name')),
                ('instrument_short_name', models.CharField(blank=True, default='', max_length=4096, verbose_name='short name')),
                ('instrument_public_name', models.CharField(blank=True, default='', max_length=4096, verbose_name='public name')),
                ('instrument_notes', models.CharField(blank=True, default='', max_length=4096, verbose_name='notes')),
                ('instrument_type', models.CharField(blank=True, default='', max_length=4096, verbose_name='instrument type')),
                ('pricing_currency', models.CharField(blank=True, default='', max_length=4096, verbose_name='pricing currency')),
                ('price_multiplier', models.CharField(blank=True, default='1.0', max_length=4096, verbose_name='price multiplier')),
                ('accrued_currency', models.CharField(blank=True, default='', max_length=4096, verbose_name='accrued currency')),
                ('accrued_multiplier', models.CharField(blank=True, default='1.0', max_length=4096, verbose_name='accrued multiplier')),
                ('maturity_date', models.CharField(blank=True, default='', max_length=4096, verbose_name='maturity date')),
                ('maturity_price', models.CharField(blank=True, default='', max_length=4096, verbose_name='maturity price')),
                ('user_text_1', models.CharField(blank=True, default='', max_length=4096, verbose_name='user text 1')),
                ('user_text_2', models.CharField(blank=True, default='', max_length=4096, verbose_name='user text 2')),
                ('user_text_3', models.CharField(blank=True, default='', max_length=4096, verbose_name='user text 3')),
                ('default_price', models.FloatField(default=0.0, verbose_name='default price')),
                ('default_accrued', models.FloatField(default=0.0, verbose_name='default accrued')),
            ],
            options={
                'verbose_name': 'instrument download scheme',
                'verbose_name_plural': 'instrument download schemes',
            },
        ),
        migrations.CreateModel(
            name='InstrumentDownloadSchemeAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=4096, verbose_name='value')),
            ],
            options={
                'verbose_name': 'instrument download scheme attribute',
                'verbose_name_plural': 'instrument download schemes attribute',
                'ordering': ['attribute_type'],
            },
        ),
        migrations.CreateModel(
            name='InstrumentDownloadSchemeInput',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=32, verbose_name='name')),
                ('field', models.CharField(blank=True, default='', max_length=32, verbose_name='field')),
                ('name_expr', models.CharField(blank=True, default='', max_length=4096, verbose_name='name expression')),
            ],
            options={
                'verbose_name': 'instrument download scheme input',
                'verbose_name_plural': 'instrument download scheme inputs',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='InstrumentMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255, verbose_name='value')),
            ],
            options={
                'verbose_name': 'instrument mapping',
                'verbose_name_plural': 'instrument mappings',
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InstrumentTypeMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255, verbose_name='value')),
            ],
            options={
                'verbose_name': 'instrument type mapping',
                'verbose_name_plural': 'instrument type mappings',
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PaymentSizeDetailMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255, verbose_name='value')),
            ],
            options={
                'verbose_name': 'payment size detail mapping',
                'verbose_name_plural': 'payment size detail model mappings',
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PeriodicityMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255, verbose_name='value')),
            ],
            options={
                'verbose_name': 'periodicity mapping',
                'verbose_name_plural': 'periodicity  mappings',
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PortfolioClassifierMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255, verbose_name='value')),
            ],
            options={
                'verbose_name': 'portfolio classifier mapping',
                'verbose_name_plural': 'portfolio classifier mappings',
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PortfolioMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255, verbose_name='value')),
            ],
            options={
                'verbose_name': 'portfolio mapping',
                'verbose_name_plural': 'portfolio mappings',
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PriceDownloadScheme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheme_name', models.CharField(max_length=255, verbose_name='scheme name')),
                ('bid0', models.CharField(blank=True, max_length=50, verbose_name='bid0')),
                ('bid1', models.CharField(blank=True, max_length=50, verbose_name='bid1')),
                ('bid2', models.CharField(blank=True, max_length=50, verbose_name='bid2')),
                ('bid_multiplier', models.FloatField(default=1.0, verbose_name='bid multiplier')),
                ('ask0', models.CharField(blank=True, max_length=50, verbose_name='ask0')),
                ('ask1', models.CharField(blank=True, max_length=50, verbose_name='ask1')),
                ('ask2', models.CharField(blank=True, max_length=50, verbose_name='ask2')),
                ('ask_multiplier', models.FloatField(default=1.0, verbose_name='ask multiplier')),
                ('last', models.CharField(blank=True, max_length=50, verbose_name='last')),
                ('last_multiplier', models.FloatField(default=1.0, verbose_name='last multiplier')),
                ('mid', models.CharField(blank=True, max_length=50, verbose_name='mid')),
                ('mid_multiplier', models.FloatField(default=1.0, verbose_name='mid multiplier')),
                ('bid_history', models.CharField(blank=True, max_length=50, verbose_name='bid history')),
                ('bid_history_multiplier', models.FloatField(default=1.0, verbose_name='bid history multiplier')),
                ('ask_history', models.CharField(blank=True, max_length=50, verbose_name='ask history')),
                ('ask_history_multiplier', models.FloatField(default=1.0, verbose_name='ask history multiplier')),
                ('mid_history', models.CharField(blank=True, max_length=50, verbose_name='mid history')),
                ('mid_history_multiplier', models.FloatField(default=1.0, verbose_name='mid history multiplier')),
                ('last_history', models.CharField(blank=True, max_length=50, verbose_name='last history')),
                ('last_history_multiplier', models.FloatField(default=1.0, verbose_name='last history multiplier')),
                ('currency_fxrate', models.CharField(blank=True, max_length=50, verbose_name='currency FX-rate')),
                ('currency_fxrate_multiplier', models.FloatField(default=1.0, verbose_name='currency FX-rate multiplier')),
            ],
            options={
                'verbose_name': 'price download scheme',
                'verbose_name_plural': 'price download schemes',
                'ordering': ['scheme_name'],
            },
        ),
        migrations.CreateModel(
            name='PriceDownloadSchemeMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255, verbose_name='value')),
            ],
            options={
                'verbose_name': 'price download scheme mapping',
                'verbose_name_plural': 'price download scheme mappings',
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PricingAutomatedSchedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='name')),
                ('notes', models.TextField(blank=True, default='', verbose_name='notes')),
                ('is_enabled', models.BooleanField(default=True, verbose_name='is enabled')),
                ('cron_expr', models.CharField(blank=True, default='', help_text='Format is "* * * * *" (minute / hour / day_month / month / day_week)', max_length=255, validators=[poms.integrations.models.validate_crontab], verbose_name='cron expr')),
                ('balance_day', models.PositiveSmallIntegerField(default=0, verbose_name='balance day')),
                ('load_days', models.PositiveSmallIntegerField(default=1, verbose_name='load days')),
                ('fill_days', models.PositiveSmallIntegerField(default=0, verbose_name='tagfill dayss')),
                ('override_existed', models.BooleanField(default=True, verbose_name='override existed')),
                ('last_run_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='last run at')),
                ('next_run_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='next run at')),
            ],
            options={
                'verbose_name': 'pricing automated schedule',
                'verbose_name_plural': 'pricing automated schedules',
                'ordering': ['is_enabled'],
            },
        ),
        migrations.CreateModel(
            name='PricingConditionMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255, verbose_name='value')),
            ],
            options={
                'verbose_name': 'pricing condition mapping',
                'verbose_name_plural': 'pricing condition model mappings',
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PricingPolicyMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255, verbose_name='value')),
            ],
            options={
                'verbose_name': 'pricing policy mapping',
                'verbose_name_plural': 'pricing policy mappings',
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProviderClass',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('user_code', models.CharField(max_length=255, unique=True, verbose_name='user code')),
                ('name', models.CharField(blank=True, default='', max_length=255, verbose_name='name')),
                ('name_en', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='name')),
                ('short_name', models.CharField(blank=True, default='', max_length=255, verbose_name='short name')),
                ('description', models.TextField(blank=True, default='', verbose_name='description')),
                ('description_en', models.TextField(blank=True, default='', null=True, verbose_name='description')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResponsibleClassifierMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255, verbose_name='value')),
            ],
            options={
                'verbose_name': 'responsible classifier mapping',
                'verbose_name_plural': 'responsible classifier mappings',
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResponsibleMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255, verbose_name='value')),
            ],
            options={
                'verbose_name': 'responsible mapping',
                'verbose_name_plural': 'responsible mappings',
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Strategy1Mapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255, verbose_name='value')),
            ],
            options={
                'verbose_name': 'strategy1 mapping',
                'verbose_name_plural': 'strategy1 mappings',
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Strategy2Mapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255, verbose_name='value')),
            ],
            options={
                'verbose_name': 'strategy2 mapping',
                'verbose_name_plural': 'strategy2 mappings',
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Strategy3Mapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255, verbose_name='value')),
            ],
            options={
                'verbose_name': 'strategy3 mapping',
                'verbose_name_plural': 'strategy3 mappings',
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('modified', models.DateTimeField(auto_now=True, db_index=True, verbose_name='modified')),
                ('action', models.CharField(db_index=True, max_length=20, verbose_name='action')),
                ('status', models.CharField(choices=[('P', 'PENDING'), ('S', 'REQUEST_SENT'), ('W', 'WAIT_RESPONSE'), ('D', 'DONE'), ('E', 'ERROR'), ('T', 'TIMEOUT')], default='P', max_length=1, verbose_name='status')),
                ('celery_tasks_id', models.CharField(blank=True, default='', max_length=255, verbose_name='celery tasks id')),
                ('options', models.TextField(blank=True, null=True, verbose_name='options')),
                ('result', models.TextField(blank=True, null=True, verbose_name='result')),
                ('request_id', models.CharField(db_index=True, max_length=50, null=True, verbose_name='request id')),
                ('response_id', models.CharField(db_index=True, max_length=50, null=True, verbose_name='response id')),
            ],
            options={
                'verbose_name': 'task',
                'verbose_name_plural': 'tasks',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='TransactionFileResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, null=True, verbose_name='created')),
                ('modified', models.DateTimeField(auto_now=True, db_index=True, verbose_name='modified')),
                ('scheme_user_code', models.CharField(max_length=255)),
                ('file_path', models.TextField(blank=True, default='', verbose_name='File Path')),
                ('file_name', models.CharField(blank=True, default='', max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
