# -*- coding: utf-8 -*-
# Generated by Django 1.10.7 on 2019-06-19 21:26
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


def fix_ecosystem_default(apps, schema_editor):
    MasterUser = apps.get_model("users", "MasterUser")
    EcosystemDefault = apps.get_model("users", "EcosystemDefault")

    Currency = apps.get_model("currencies", "Currency")
    AccountType = apps.get_model("accounts", "AccountType")
    Account = apps.get_model("accounts", "Account")

    CounterpartyGroup = apps.get_model("counterparties", "CounterpartyGroup")
    Counterparty = apps.get_model("counterparties", "Counterparty")
    ResponsibleGroup = apps.get_model("counterparties", "ResponsibleGroup")
    Responsible = apps.get_model("counterparties", "Responsible")

    Portfolio = apps.get_model("portfolios", "Portfolio")

    InstrumentType = apps.get_model("instruments", "InstrumentType")
    InstrumentClass = apps.get_model("instruments", "InstrumentClass")
    Instrument = apps.get_model("instruments", "Instrument")
    DailyPricingModel = apps.get_model("instruments", "DailyPricingModel")
    AccrualCalculationModel = apps.get_model("instruments", "AccrualCalculationModel")
    PaymentSizeDetail = apps.get_model("instruments", "PaymentSizeDetail")
    Periodicity = apps.get_model("instruments", "Periodicity")
    PricingPolicy = apps.get_model("instruments", "PricingPolicy")


    Strategy1Group = apps.get_model("strategies", "Strategy1Group")
    Strategy1Subgroup = apps.get_model("strategies", "Strategy1Subgroup")
    Strategy1 = apps.get_model("strategies", "Strategy1")

    Strategy2Group = apps.get_model("strategies", "Strategy2Group")
    Strategy2Subgroup = apps.get_model("strategies", "Strategy2Subgroup")
    Strategy2 = apps.get_model("strategies", "Strategy2")

    Strategy3Group = apps.get_model("strategies", "Strategy3Group")
    Strategy3Subgroup = apps.get_model("strategies", "Strategy3Subgroup")
    Strategy3 = apps.get_model("strategies", "Strategy3")

    ThreadGroup = apps.get_model("chats", "ThreadGroup")

    TransactionTypeGroup = apps.get_model("transactions", "TransactionTypeGroup")
    TransactionType = apps.get_model("transactions", "TransactionType")

    PriceDownloadScheme = apps.get_model("integrations", "PriceDownloadScheme")

    for master_user in MasterUser.objects.all():

        try:
            exists = EcosystemDefault.objects.get(master_user=master_user)
        except EcosystemDefault.DoesNotExist:

            ecosystem_defaults = EcosystemDefault()

            ecosystem_defaults.master_user = master_user
            ecosystem_defaults.currency = Currency.objects.get(master_user=master_user, user_code='-')
            ecosystem_defaults.account_type = AccountType.objects.get(master_user=master_user, user_code='-')
            ecosystem_defaults.account = Account.objects.get(master_user=master_user, user_code='-')
            ecosystem_defaults.counterparty_group = CounterpartyGroup.objects.get(master_user=master_user, user_code='-')
            ecosystem_defaults.counterparty = Counterparty.objects.get(master_user=master_user, user_code='-')
            ecosystem_defaults.responsible_group = ResponsibleGroup.objects.get(master_user=master_user, user_code='-')
            ecosystem_defaults.responsible = Responsible.objects.get(master_user=master_user, user_code='-')
            ecosystem_defaults.portfolio = Portfolio.objects.get(master_user=master_user, user_code='-')
            ecosystem_defaults.instrument_type = InstrumentType.objects.get(master_user=master_user, user_code='-')
            ecosystem_defaults.instrument = Instrument.objects.get(master_user=master_user, user_code='-')

            ecosystem_defaults.strategy1_group = Strategy1Group.objects.get(master_user=master_user, user_code='-')
            ecosystem_defaults.strategy1_subgroup = Strategy1Subgroup.objects.get(master_user=master_user, user_code='-')
            ecosystem_defaults.strategy1 = Strategy1.objects.get(master_user=master_user, user_code='-')

            ecosystem_defaults.strategy2_group = Strategy2Group.objects.get(master_user=master_user, user_code='-')
            ecosystem_defaults.strategy2_subgroup = Strategy2Subgroup.objects.get(master_user=master_user, user_code='-')
            ecosystem_defaults.strategy2 = Strategy2.objects.get(master_user=master_user, user_code='-')

            ecosystem_defaults.strategy3_group = Strategy3Group.objects.get(master_user=master_user, user_code='-')
            ecosystem_defaults.strategy3_subgroup = Strategy3Subgroup.objects.get(master_user=master_user, user_code='-')
            ecosystem_defaults.strategy3 = Strategy3.objects.get(master_user=master_user, user_code='-')

            ecosystem_defaults.thread_group = ThreadGroup.objects.get(master_user=master_user, name='-')
            ecosystem_defaults.transaction_type_group = TransactionTypeGroup.objects.get(master_user=master_user, user_code='-')
            ecosystem_defaults.mismatch_portfolio = Portfolio.objects.get(master_user=master_user, user_code='-')
            ecosystem_defaults.mismatch_account = Account.objects.get(master_user=master_user, user_code='-')
            ecosystem_defaults.pricing_policy = PricingPolicy.objects.get(master_user=master_user, name='-')
            ecosystem_defaults.transaction_type = TransactionType.objects.get(master_user=master_user, user_code='-')
            ecosystem_defaults.price_download_scheme = PriceDownloadScheme.objects.get(master_user=master_user, scheme_name='-')

            ecosystem_defaults.instrument_class = InstrumentClass.objects.get(pk=6)  # InstrumentClass.DEFAULT
            ecosystem_defaults.daily_pricing_model = DailyPricingModel.objects.get(pk=6) # DailyPricingModel.DEFAULT
            ecosystem_defaults.accrual_calculation_model = AccrualCalculationModel.objects.get(pk=25) # AccrualCalculationModel.DEFAULT
            ecosystem_defaults.payment_size_detail = PaymentSizeDetail.objects.get(pk=7) # PaymentSizeDetail.DEFAULT
            ecosystem_defaults.periodicity = Periodicity.objects.get(pk=13) # Periodicity.DEFAULT

            ecosystem_defaults.save()


def rev(apps, schema_editor):
    # the reverse goes here if you want to copy company names into customer again if you migrate backwards.
    pass


class Migration(migrations.Migration):
    dependencies = [
        ('instruments', '0011_auto_20190614_1035'),
        ('users', '0015_ecosystemdefault'),
    ]

    operations = [
        migrations.AddField(
            model_name='ecosystemdefault',
            name='accrual_calculation_model',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    to='instruments.AccrualCalculationModel', verbose_name='accrual calculation model'),
        ),
        migrations.AddField(
            model_name='ecosystemdefault',
            name='daily_pricing_model',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    to='instruments.DailyPricingModel', verbose_name='daily pricing model'),
        ),
        migrations.AddField(
            model_name='ecosystemdefault',
            name='instrument_class',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    to='instruments.InstrumentClass', verbose_name='instrument class'),
        ),
        migrations.AddField(
            model_name='ecosystemdefault',
            name='payment_size_detail',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    to='instruments.PaymentSizeDetail', verbose_name='payment size detail'),
        ),
        migrations.AddField(
            model_name='ecosystemdefault',
            name='periodicity',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    to='instruments.Periodicity', verbose_name='periodicity'),
        ),

        migrations.RunPython(fix_ecosystem_default, rev)
    ]
