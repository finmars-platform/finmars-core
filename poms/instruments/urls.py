from rest_framework import routers

import poms.instruments.views as instruments

router = routers.DefaultRouter()

router.register(
    "instrument-class",
    instruments.InstrumentClassViewSet,
)
router.register(
    "daily-pricing-model",
    instruments.DailyPricingModelViewSet,
)
router.register(
    "accrual-calculation-model",
    instruments.AccrualCalculationModelClassViewSet,
)
router.register(
    "payment-size-detail",
    instruments.PaymentSizeDetailViewSet,
)
router.register(
    "pricing-condition",
    instruments.PricingConditionViewSet,
)
router.register(
    "country",
    instruments.CountryViewSet,
)
router.register(
    "exposure-calculation-model",
    instruments.ExposureCalculationModelViewSet,
)
router.register(
    "long-underlying-exposure",
    instruments.LongUnderlyingExposureViewSet,
)
router.register(
    "short-underlying-exposure",
    instruments.ShortUnderlyingExposureViewSet,
)
router.register(
    "periodicity",
    instruments.PeriodicityViewSet,
)
router.register(
    "cost-method",
    instruments.CostMethodViewSet,
)
router.register(
    "pricing-policy",
    instruments.PricingPolicyViewSet,
)
router.register(
    "event-schedule-config",
    instruments.EventScheduleConfigViewSet,
)
router.register(
    "instrument-type",
    instruments.InstrumentTypeViewSet,
)
router.register(
    "instrument-type-attribute-type",
    instruments.InstrumentTypeAttributeTypeViewSet,
)
router.register(
    "instrument-attribute-type",
    instruments.InstrumentAttributeTypeViewSet,
    "instrumentattributetype",
)
router.register(
    "instrument-classifie",
    instruments.InstrumentClassifierViewSet,
    "instrumentclassifie",
)
router.register(
    "instrument",
    instruments.InstrumentViewSet,
)
router.register(
    "instrument-for-select",
    instruments.InstrumentForSelectViewSet,
)
router.register(
    "price-history",
    instruments.PriceHistoryViewSet,
)
router.register(
    "generated-event",
    instruments.GeneratedEventViewSet,
)
