# Generated by Django 2.2.5 on 2022-01-05 14:49

# -*- coding: utf-8 -*-
# Generated by Django 1.10.7 on 2019-02-21 11:34
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion




def fix_transactions(apps, schema_editor):




    ComplexTransactionInput = apps.get_model("transactions", "ComplexTransactionInput")

    # account = models.ForeignKey('accounts.Account', null=True, blank=True, on_delete=models.SET_NULL, related_name='+',
    #                             verbose_name=ugettext_lazy('account'))
    # instrument_type = models.ForeignKey('instruments.InstrumentType', null=True, blank=True, on_delete=models.SET_NULL,
    #                                     related_name='+', verbose_name=ugettext_lazy('instrument type'))
    # instrument = models.ForeignKey('instruments.Instrument', null=True, blank=True, on_delete=models.SET_NULL,
    #                                related_name='+', verbose_name=ugettext_lazy('instrument'))
    # currency = models.ForeignKey('currencies.Currency', null=True, blank=True, on_delete=models.SET_NULL,
    #                              related_name='+', verbose_name=ugettext_lazy('currency'))
    # counterparty = models.ForeignKey('counterparties.Counterparty', null=True, blank=True, on_delete=models.SET_NULL,
    #                                  related_name='+', verbose_name=ugettext_lazy('counterparty'))
    # responsible = models.ForeignKey('counterparties.Responsible', null=True, blank=True, on_delete=models.SET_NULL,
    #                                 related_name='+', verbose_name=ugettext_lazy('responsible'))
    # portfolio = models.ForeignKey('portfolios.Portfolio', null=True, blank=True, on_delete=models.SET_NULL,
    #                               related_name='+', verbose_name=ugettext_lazy('portfolio'))
    # strategy1 = models.ForeignKey('strategies.Strategy1', null=True, blank=True, on_delete=models.SET_NULL,
    #                               related_name='+', verbose_name=ugettext_lazy('strategy 1'))
    # strategy2 = models.ForeignKey('strategies.Strategy2', null=True, blank=True, on_delete=models.SET_NULL,
    #                               related_name='+', verbose_name=ugettext_lazy('strategy 2'))
    # strategy3 = models.ForeignKey('strategies.Strategy3', null=True, blank=True, on_delete=models.SET_NULL,
    #                               related_name='+', verbose_name=ugettext_lazy('strategy 3'))
    # daily_pricing_model = models.ForeignKey('instruments.DailyPricingModel', null=True, blank=True,
    #                                         on_delete=models.SET_NULL, related_name='+',
    #                                         verbose_name=ugettext_lazy('daily pricing model'))
    # payment_size_detail = models.ForeignKey('instruments.PaymentSizeDetail', null=True, blank=True,
    #                                         on_delete=models.SET_NULL, related_name='+',
    #                                         verbose_name=ugettext_lazy('payment size detail'))
    #
    # pricing_policy = models.ForeignKey('instruments.PricingPolicy', null=True, blank=True,
    #                                    on_delete=models.SET_NULL, related_name='+',
    #                                    verbose_name=ugettext_lazy('pricing policy'))
    #
    # periodicity = models.ForeignKey('instruments.Periodicity', null=True, blank=True,
    #                                 on_delete=models.PROTECT, related_name='+',
    #                                 verbose_name=ugettext_lazy('periodicity'))
    #
    # accrual_calculation_model = models.ForeignKey('instruments.AccrualCalculationModel', null=True, blank=True,
    #                                               on_delete=models.PROTECT, related_name='+',
    #                                               verbose_name=ugettext_lazy('accrual calculation model'))
    #
    # event_class = models.ForeignKey(EventClass, null=True, blank=True,
    #                                 on_delete=models.PROTECT, related_name='+',
    #                                 verbose_name=ugettext_lazy('event class'))
    #
    # notification_class = models.ForeignKey(NotificationClass, null=True, blank=True,
    #                                        on_delete=models.PROTECT, related_name='+',
    #                                        verbose_name=ugettext_lazy('notification class'))

    counter = 0

    for input in ComplexTransactionInput.objects.select_related('transaction_type_input',
                                                                'account',
                                                                'instrument_type',
                                                                'currency',
                                                                'counterparty',
                                                                'responsible',
                                                                'portfolio',
                                                                'strategy1',
                                                                'strategy2',
                                                                'strategy3',
                                                                'daily_pricing_model',
                                                                'payment_size_detail',
                                                                'pricing_policy',
                                                                'periodicity',
                                                                'accrual_calculation_model',
                                                                'event_class',
                                                                'notification_class').all():

        if input.account:
            input.value_relation = input.account.user_code

        if input.instrument_type:
            input.value_relation = input.instrument_type.user_code

        if input.currency:
            input.value_relation = input.currency.user_code

        if input.counterparty:
            input.value_relation = input.counterparty.user_code

        if input.responsible:
            input.value_relation = input.responsible.user_code

        if input.portfolio:
            input.value_relation = input.portfolio.user_code

        if input.strategy1:
            input.value_relation = input.strategy1.user_code

        if input.strategy2:
            input.value_relation = input.strategy2.user_code

        if input.strategy3:
            input.value_relation = input.strategy3.user_code

        if input.daily_pricing_model:
            input.value_relation = input.daily_pricing_model.user_code

        if input.payment_size_detail:
            input.value_relation = input.payment_size_detail.user_code

        if input.pricing_policy:
            input.value_relation = input.pricing_policy.user_code

        if input.periodicity:
            input.value_relation = input.periodicity.user_code

        if input.accrual_calculation_model:
            input.value_relation = input.accrual_calculation_model.user_code

        if input.event_class:
            input.value_relation = input.event_class.user_code

        if input.notification_class:
            input.value_relation = input.notification_class.user_code

        input.save()

        counter = counter + 1

    print('Inputs processed %s' % counter)


def rev(apps, schema_editor):
    # the reverse goes here if you want to copy company names into customer again if you migrate backwards.
    pass


class Migration(migrations.Migration):
    dependencies = [
        ('transactions', '0093_complextransactioninput_value_relation'),
    ]

    operations = [
        migrations.RunPython(fix_transactions, rev)
    ]
