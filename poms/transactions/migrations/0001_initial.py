# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2016-12-05 12:27
from __future__ import unicode_literals

import django.db.models.deletion
from django.db import migrations, models

import poms.common.utils


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('instruments', '0002_auto_20161205_1227'),
        ('strategies', '0002_auto_20161205_1227'),
        ('accounts', '0002_auto_20161205_1227'),
        ('portfolios', '0002_auto_20161205_1227'),
        ('users', '0001_initial'),
        ('integrations', '0002_auto_20161205_1227'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('currencies', '0003_auto_20161205_1227'),
        ('counterparties', '0002_auto_20161205_1227'),
    ]

    operations = [
        migrations.CreateModel(
            name='ActionClass',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('system_code', models.CharField(max_length=255, unique=True, verbose_name='system code')),
                ('name', models.CharField(blank=True, default='', max_length=255, verbose_name='name')),
                ('name_en', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='name')),
                ('name_es', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='name')),
                ('name_de', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='name')),
                ('name_ru', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='name')),
                ('description', models.TextField(blank=True, default='', verbose_name='description')),
                ('description_en', models.TextField(blank=True, default='', null=True, verbose_name='description')),
                ('description_es', models.TextField(blank=True, default='', null=True, verbose_name='description')),
                ('description_de', models.TextField(blank=True, default='', null=True, verbose_name='description')),
                ('description_ru', models.TextField(blank=True, default='', null=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'action class',
                'abstract': False,
                'verbose_name_plural': 'action classes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ComplexTransaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Production'), (2, 'Pending')], db_index=True,
                                                            default=1)),
                ('code', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ['code'],
                'verbose_name_plural': 'complex transactions',
                'verbose_name': 'complex transaction',
            },
        ),
        migrations.CreateModel(
            name='EventClass',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('system_code', models.CharField(max_length=255, unique=True, verbose_name='system code')),
                ('name', models.CharField(blank=True, default='', max_length=255, verbose_name='name')),
                ('name_en', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='name')),
                ('name_es', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='name')),
                ('name_de', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='name')),
                ('name_ru', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='name')),
                ('description', models.TextField(blank=True, default='', verbose_name='description')),
                ('description_en', models.TextField(blank=True, default='', null=True, verbose_name='description')),
                ('description_es', models.TextField(blank=True, default='', null=True, verbose_name='description')),
                ('description_de', models.TextField(blank=True, default='', null=True, verbose_name='description')),
                ('description_ru', models.TextField(blank=True, default='', null=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'event class',
                'abstract': False,
                'verbose_name_plural': 'event classes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EventToHandle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_code', models.CharField(blank=True, max_length=25, null=True, verbose_name='user code')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('short_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='short name')),
                ('public_name',
                 models.CharField(blank=True, help_text='used if user does not have permissions to view object',
                                  max_length=255, null=True, verbose_name='public name')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('notification_date', models.DateField(blank=True, null=True, verbose_name='notification date')),
                ('effective_date', models.DateField(blank=True, null=True, verbose_name='effective date')),
                ('master_user',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events_to_handle',
                                   to='users.MasterUser', verbose_name='master user')),
            ],
            options={
                'verbose_name': 'event to handle',
                'abstract': False,
                'verbose_name_plural': 'events to handle',
                'ordering': ['user_code'],
            },
        ),
        migrations.CreateModel(
            name='ExternalCashFlow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(db_index=True, default=poms.common.utils.date_now, verbose_name='date')),
                ('amount', models.FloatField(default=0.0, verbose_name='amount')),
                ('account',
                 models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='external_cash_flows',
                                   to='accounts.Account', verbose_name='account')),
                ('currency',
                 models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='external_cash_flows',
                                   to='currencies.Currency', verbose_name='currency')),
                ('master_user',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='external_cash_flows',
                                   to='users.MasterUser', verbose_name='master user')),
                ('portfolio',
                 models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='external_cash_flows',
                                   to='portfolios.Portfolio', verbose_name='portfolio')),
            ],
            options={
                'ordering': ['date'],
                'verbose_name_plural': 'external cash flows',
                'verbose_name': 'external cash flow',
            },
        ),
        migrations.CreateModel(
            name='ExternalCashFlowStrategy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0, verbose_name='order')),
                ('external_cash_flow',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='strategies',
                                   to='transactions.ExternalCashFlow', verbose_name='external cash flow')),
                ('strategy1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                                related_name='external_cash_flow_strategies1',
                                                to='strategies.Strategy1', verbose_name='strategy1')),
                ('strategy2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                                related_name='external_cash_flow_strategies2',
                                                to='strategies.Strategy2', verbose_name='strategy2')),
                ('strategy3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                                related_name='external_cash_flow_strategies3',
                                                to='strategies.Strategy3', verbose_name='strategy3')),
            ],
            options={
                'ordering': ['order'],
                'verbose_name_plural': 'external cash flow strtegies',
                'verbose_name': 'external cash flow strategy',
            },
        ),
        migrations.CreateModel(
            name='NotificationClass',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('system_code', models.CharField(max_length=255, unique=True, verbose_name='system code')),
                ('name', models.CharField(blank=True, default='', max_length=255, verbose_name='name')),
                ('name_en', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='name')),
                ('name_es', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='name')),
                ('name_de', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='name')),
                ('name_ru', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='name')),
                ('description', models.TextField(blank=True, default='', verbose_name='description')),
                ('description_en', models.TextField(blank=True, default='', null=True, verbose_name='description')),
                ('description_es', models.TextField(blank=True, default='', null=True, verbose_name='description')),
                ('description_de', models.TextField(blank=True, default='', null=True, verbose_name='description')),
                ('description_ru', models.TextField(blank=True, default='', null=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'notification class',
                'abstract': False,
                'verbose_name_plural': 'notification classes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PeriodicityGroup',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('system_code', models.CharField(max_length=255, unique=True, verbose_name='system code')),
                ('name', models.CharField(blank=True, default='', max_length=255, verbose_name='name')),
                ('name_en', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='name')),
                ('name_es', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='name')),
                ('name_de', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='name')),
                ('name_ru', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='name')),
                ('description', models.TextField(blank=True, default='', verbose_name='description')),
                ('description_en', models.TextField(blank=True, default='', null=True, verbose_name='description')),
                ('description_es', models.TextField(blank=True, default='', null=True, verbose_name='description')),
                ('description_de', models.TextField(blank=True, default='', null=True, verbose_name='description')),
                ('description_ru', models.TextField(blank=True, default='', null=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'periodicity group',
                'abstract': False,
                'verbose_name_plural': 'periodicity group',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('complex_transaction_order', models.PositiveSmallIntegerField(default=0.0)),
                ('transaction_code', models.IntegerField(default=0, verbose_name='transaction code')),
                ('position_size_with_sign', models.FloatField(default=0.0, verbose_name='position size with sign')),
                ('cash_consideration', models.FloatField(default=0.0, verbose_name='cash consideration')),
                ('principal_with_sign', models.FloatField(default=0.0, verbose_name='principal with sign')),
                ('carry_with_sign', models.FloatField(default=0.0, verbose_name='carry with sign')),
                ('overheads_with_sign', models.FloatField(default=0.0, verbose_name='overheads with sign')),
                ('transaction_date',
                 models.DateField(default=poms.common.utils.date_now, editable=False, verbose_name='transaction date')),
                ('accounting_date',
                 models.DateField(default=poms.common.utils.date_now, verbose_name='accounting date')),
                ('cash_date', models.DateField(default=poms.common.utils.date_now, verbose_name='cash date')),
                ('reference_fx_rate', models.FloatField(default=0.0,
                                                        help_text='FX rate to convert from Settlement ccy to Instrument Ccy on Accounting Date (trade date)',
                                                        verbose_name='reference fx-rate')),
                ('is_locked', models.BooleanField(default=False, help_text='If checked - transaction cannot be changed',
                                                  verbose_name='is locked')),
                ('is_canceled', models.BooleanField(default=False, help_text='If checked - transaction is cancelled',
                                                    verbose_name='is canceled')),
                ('factor', models.FloatField(default=0.0, help_text='Multiplier (for calculations on the form)',
                                             verbose_name='factor')),
                ('trade_price', models.FloatField(default=0.0, help_text='Price (for calculations on the form)',
                                                  verbose_name='trade price')),
                ('principal_amount', models.FloatField(default=0.0,
                                                       help_text='Absolute value of Principal with Sign (for calculations on the form)',
                                                       verbose_name='principal amount')),
                ('carry_amount', models.FloatField(default=0.0,
                                                   help_text='Absolute value of Carry with Sign (for calculations on the form)',
                                                   verbose_name='carry amount')),
                ('overheads', models.FloatField(default=0.0,
                                                help_text='Absolute value of Carry with Sign (for calculations on the form)',
                                                verbose_name='overheads')),
                ('account_cash', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                                   related_name='transactions_account_cash', to='accounts.Account',
                                                   verbose_name='account cash')),
                ('account_interim',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                   related_name='transactions_account_interim', to='accounts.Account',
                                   verbose_name='account interim')),
                ('account_position',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                   related_name='transactions_account_position', to='accounts.Account',
                                   verbose_name='account position')),
                ('allocation_balance',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                   related_name='transactions_allocation_balance', to='instruments.Instrument',
                                   verbose_name='allocation balance')),
                ('allocation_pl', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                                    related_name='transactions_allocation_pl',
                                                    to='instruments.Instrument', verbose_name='allocation P&L')),
                ('complex_transaction',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                   related_name='transactions', to='transactions.ComplexTransaction')),
                ('counterparty', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                                   related_name='transactions', to='counterparties.Counterparty',
                                                   verbose_name='counterparty')),
                ('instrument', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                                 related_name='transactions', to='instruments.Instrument',
                                                 verbose_name='instrument')),
                ('linked_instrument',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                   related_name='transactions_linked', to='instruments.Instrument',
                                   verbose_name='linked instrument')),
                ('master_user',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions',
                                   to='users.MasterUser', verbose_name='master user')),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='portfolios.Portfolio',
                                                verbose_name='portfolio')),
                ('responsible', models.ForeignKey(blank=True, help_text='Trader or transaction executor', null=True,
                                                  on_delete=django.db.models.deletion.PROTECT,
                                                  related_name='transactions', to='counterparties.Responsible',
                                                  verbose_name='responsible')),
                ('settlement_currency', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT,
                                                          related_name='transactions_settlement_currency',
                                                          to='currencies.Currency',
                                                          verbose_name='settlement currency')),
                ('strategy1_cash', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                                     related_name='transactions_strategy1_cash',
                                                     to='strategies.Strategy1',
                                                     verbose_name='strategy - 1 - position')),
                ('strategy1_position',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                   related_name='transactions_strategy1_position', to='strategies.Strategy1',
                                   verbose_name='strategy - 1 - cash')),
                ('strategy2_cash', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                                     related_name='transactions_strategy2_cash',
                                                     to='strategies.Strategy2',
                                                     verbose_name='strategy - 2 - position')),
                ('strategy2_position',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                   related_name='transactions_strategy2_position', to='strategies.Strategy2',
                                   verbose_name='strategy - 2 - cash')),
                ('strategy3_cash', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                                     related_name='transactions_strategy3_cash',
                                                     to='strategies.Strategy3',
                                                     verbose_name='strategy - 3 - position')),
                ('strategy3_position',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                   related_name='transactions_strategy3_position', to='strategies.Strategy3',
                                   verbose_name='strategy - 3 - cash')),
            ],
            options={
                'ordering': ['transaction_date', 'transaction_code'],
                'verbose_name_plural': 'transactions',
                'verbose_name': 'transaction',
            },
        ),
        migrations.CreateModel(
            name='TransactionClass',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('system_code', models.CharField(max_length=255, unique=True, verbose_name='system code')),
                ('name', models.CharField(blank=True, default='', max_length=255, verbose_name='name')),
                ('name_en', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='name')),
                ('name_es', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='name')),
                ('name_de', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='name')),
                ('name_ru', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='name')),
                ('description', models.TextField(blank=True, default='', verbose_name='description')),
                ('description_en', models.TextField(blank=True, default='', null=True, verbose_name='description')),
                ('description_es', models.TextField(blank=True, default='', null=True, verbose_name='description')),
                ('description_de', models.TextField(blank=True, default='', null=True, verbose_name='description')),
                ('description_ru', models.TextField(blank=True, default='', null=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'transaction class',
                'abstract': False,
                'verbose_name_plural': 'transaction classes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TransactionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_code', models.CharField(blank=True, max_length=25, null=True, verbose_name='user code')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('short_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='short name')),
                ('public_name',
                 models.CharField(blank=True, help_text='used if user does not have permissions to view object',
                                  max_length=255, null=True, verbose_name='public name')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('display_expr', models.CharField(blank=True, default='', max_length=255)),
                ('is_valid_for_all_portfolios', models.BooleanField(default=True)),
                ('is_valid_for_all_instruments', models.BooleanField(default=True)),
                ('book_transaction_layout_json', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
                'permissions': [('view_transactiontype', 'Can view transaction type'),
                                ('manage_transactiontype', 'Can manage transaction type')],
                'verbose_name': 'transaction type',
                'ordering': ['user_code'],
                'verbose_name_plural': 'transaction types',
            },
        ),
        migrations.CreateModel(
            name='TransactionTypeAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0)),
                ('action_notes', models.TextField(blank=True, default='')),
            ],
            options={
                'ordering': ['order'],
                'verbose_name_plural': 'actions',
                'verbose_name': 'action',
            },
        ),
        migrations.CreateModel(
            name='TransactionTypeGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_code', models.CharField(blank=True, max_length=25, null=True, verbose_name='user code')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('short_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='short name')),
                ('public_name',
                 models.CharField(blank=True, help_text='used if user does not have permissions to view object',
                                  max_length=255, null=True, verbose_name='public name')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('master_user',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transaction_type_groups',
                                   to='users.MasterUser', verbose_name='master user')),
            ],
            options={
                'abstract': False,
                'permissions': [('view_transactiontypegroup', 'Can view transaction type group'),
                                ('manage_transactiontypegroup', 'Can manage transaction type group')],
                'verbose_name': 'transaction type group',
                'ordering': ['user_code'],
                'verbose_name_plural': 'transaction type groups',
            },
        ),
        migrations.CreateModel(
            name='TransactionTypeInput',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('verbose_name', models.CharField(blank=True, max_length=255, null=True)),
                ('value_type', models.PositiveSmallIntegerField(
                    choices=[(20, 'Number'), (10, 'String'), (40, 'Date'), (100, 'Relation')], default=20,
                    verbose_name='value type')),
                ('order', models.IntegerField(default=0, verbose_name='order')),
                ('is_fill_from_context', models.BooleanField(default=False)),
                ('value', models.CharField(blank=True, help_text='is expression', max_length=255, null=True)),
                ('account',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+',
                                   to='accounts.Account')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                   to='contenttypes.ContentType', verbose_name='content type')),
                ('counterparty',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+',
                                   to='counterparties.Counterparty')),
                ('currency',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+',
                                   to='currencies.Currency')),
                ('daily_pricing_model',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+',
                                   to='instruments.DailyPricingModel')),
                ('instrument',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+',
                                   to='instruments.Instrument')),
                ('instrument_type',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+',
                                   to='instruments.InstrumentType')),
                ('payment_size_detail',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+',
                                   to='instruments.PaymentSizeDetail')),
                ('portfolio',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+',
                                   to='portfolios.Portfolio')),
                ('price_download_scheme',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+',
                                   to='integrations.PriceDownloadScheme')),
                ('responsible',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+',
                                   to='counterparties.Responsible')),
                ('strategy1',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+',
                                   to='strategies.Strategy1')),
                ('strategy2',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+',
                                   to='strategies.Strategy2')),
                ('strategy3',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+',
                                   to='strategies.Strategy3')),
                ('transaction_type',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inputs',
                                   to='transactions.TransactionType')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'transaction type inputs',
                'verbose_name': 'transaction type input',
            },
        ),
        migrations.CreateModel(
            name='TransactionTypeActionInstrument',
            fields=[
                ('transactiontypeaction_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='transactions.TransactionTypeAction')),
                ('user_code', models.CharField(blank=True, default='', max_length=255)),
                ('name', models.CharField(blank=True, default='', max_length=255)),
                ('public_name', models.CharField(blank=True, default='', max_length=255)),
                ('short_name', models.CharField(blank=True, default='', max_length=255)),
                ('notes', models.CharField(blank=True, default='', max_length=255)),
                ('price_multiplier', models.CharField(default='0.', max_length=255)),
                ('accrued_multiplier', models.CharField(default='0.', max_length=255)),
                ('default_price', models.CharField(default='0.', max_length=255)),
                ('default_accrued', models.CharField(default='0.', max_length=255)),
                ('user_text_1', models.CharField(blank=True, default='', max_length=255)),
                ('user_text_2', models.CharField(blank=True, default='', max_length=255)),
                ('user_text_3', models.CharField(blank=True, default='', max_length=255)),
                ('reference_for_pricing',
                 models.CharField(blank=True, default='', max_length=100, verbose_name='reference for pricing')),
                ('maturity_date', models.CharField(default='now()', max_length=255)),
                ('accrued_currency',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+',
                                   to='currencies.Currency')),
            ],
            options={
                'verbose_name_plural': 'transaction type action instruments',
                'verbose_name': 'transaction type action instrument',
            },
            bases=('transactions.transactiontypeaction',),
        ),
        migrations.CreateModel(
            name='TransactionTypeActionTransaction',
            fields=[
                ('transactiontypeaction_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='transactions.TransactionTypeAction')),
                ('position_size_with_sign', models.CharField(default='0.', max_length=255)),
                ('cash_consideration', models.CharField(default='0.', max_length=255)),
                ('principal_with_sign', models.CharField(default='0.', max_length=255)),
                ('carry_with_sign', models.CharField(default='0.', max_length=255)),
                ('overheads_with_sign', models.CharField(default='0.', max_length=255)),
                ('accounting_date', models.CharField(blank=True, default='', max_length=255)),
                ('cash_date', models.CharField(blank=True, default='', max_length=255)),
                ('reference_fx_rate', models.CharField(default='0.0', max_length=255)),
                ('factor', models.CharField(default='0.0', max_length=255)),
                ('trade_price', models.CharField(default='0.0', max_length=255)),
                ('principal_amount', models.CharField(default='0.0', max_length=255)),
                ('carry_amount', models.CharField(default='0.0', max_length=255)),
                ('overheads', models.CharField(default='0.0', max_length=255)),
                ('account_cash',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+',
                                   to='accounts.Account')),
            ],
            options={
                'verbose_name_plural': 'transaction type action transactions',
                'verbose_name': 'transaction type action transaction',
            },
            bases=('transactions.transactiontypeaction',),
        ),
        migrations.AddField(
            model_name='transactiontypeaction',
            name='transaction_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='actions',
                                    to='transactions.TransactionType'),
        ),
        migrations.AddField(
            model_name='transactiontype',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    to='transactions.TransactionTypeGroup'),
        ),
        migrations.AddField(
            model_name='transactiontype',
            name='instrument_types',
            field=models.ManyToManyField(blank=True, related_name='transaction_types', to='instruments.InstrumentType',
                                         verbose_name='instrument types'),
        ),
        migrations.AddField(
            model_name='transactiontype',
            name='master_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transaction_types',
                                    to='users.MasterUser', verbose_name='master user'),
        ),
        migrations.AddField(
            model_name='transaction',
            name='transaction_class',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='transactions.TransactionClass',
                                    verbose_name='transaction class'),
        ),
        migrations.AddField(
            model_name='transaction',
            name='transaction_currency',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='transactions', to='currencies.Currency',
                                    verbose_name='transaction currency'),
        ),
        migrations.AddField(
            model_name='eventtohandle',
            name='transaction_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='transactions.TransactionType',
                                    verbose_name='transaction type'),
        ),
        migrations.AddField(
            model_name='complextransaction',
            name='transaction_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='transactions.TransactionType'),
        ),
        migrations.AlterUniqueTogether(
            name='transactiontypeinput',
            unique_together=set([('transaction_type', 'name')]),
        ),
        migrations.AlterIndexTogether(
            name='transactiontypeinput',
            index_together=set([('transaction_type', 'order')]),
        ),
        migrations.AlterUniqueTogether(
            name='transactiontypegroup',
            unique_together=set([('master_user', 'user_code')]),
        ),
        migrations.AlterIndexTogether(
            name='transactiontypegroup',
            index_together=set([('master_user', 'is_deleted')]),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='account_cash_input',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeInput'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='account_interim',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='accounts.Account'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='account_interim_input',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeInput'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='account_position',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='accounts.Account'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='account_position_input',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeInput'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='allocation_balance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='instruments.Instrument'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='allocation_balance_input',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeInput'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='allocation_balance_phantom',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeActionInstrument'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='allocation_pl',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='instruments.Instrument'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='allocation_pl_input',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeInput'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='allocation_pl_phantom',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeActionInstrument'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='counterparty',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='counterparties.Counterparty'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='counterparty_input',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeInput'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='instrument',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='instruments.Instrument'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='instrument_input',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeInput'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='instrument_phantom',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeActionInstrument'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='linked_instrument',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='instruments.Instrument'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='linked_instrument_input',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeInput'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='linked_instrument_phantom',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeActionInstrument'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='portfolio',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='portfolios.Portfolio'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='portfolio_input',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeInput'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='responsible',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='counterparties.Responsible'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='responsible_input',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeInput'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='settlement_currency',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='currencies.Currency'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='settlement_currency_input',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeInput'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='strategy1_cash',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='strategies.Strategy1'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='strategy1_cash_input',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeInput'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='strategy1_position',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='strategies.Strategy1'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='strategy1_position_input',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeInput'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='strategy2_cash',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='strategies.Strategy2'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='strategy2_cash_input',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeInput'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='strategy2_position',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='strategies.Strategy2'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='strategy2_position_input',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeInput'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='strategy3_cash',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='strategies.Strategy3'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='strategy3_cash_input',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeInput'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='strategy3_position',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='strategies.Strategy3'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='strategy3_position_input',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeInput'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='transaction_class',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+',
                                    to='transactions.TransactionClass'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='transaction_currency',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='currencies.Currency'),
        ),
        migrations.AddField(
            model_name='transactiontypeactiontransaction',
            name='transaction_currency_input',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeInput'),
        ),
        migrations.AddField(
            model_name='transactiontypeactioninstrument',
            name='accrued_currency_input',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeInput'),
        ),
        migrations.AddField(
            model_name='transactiontypeactioninstrument',
            name='daily_pricing_model',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='instruments.DailyPricingModel'),
        ),
        migrations.AddField(
            model_name='transactiontypeactioninstrument',
            name='daily_pricing_model_input',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeInput'),
        ),
        migrations.AddField(
            model_name='transactiontypeactioninstrument',
            name='instrument_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='instruments.InstrumentType'),
        ),
        migrations.AddField(
            model_name='transactiontypeactioninstrument',
            name='instrument_type_input',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeInput'),
        ),
        migrations.AddField(
            model_name='transactiontypeactioninstrument',
            name='payment_size_detail',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='instruments.PaymentSizeDetail'),
        ),
        migrations.AddField(
            model_name='transactiontypeactioninstrument',
            name='payment_size_detail_input',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeInput'),
        ),
        migrations.AddField(
            model_name='transactiontypeactioninstrument',
            name='price_download_scheme',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    to='integrations.PriceDownloadScheme', verbose_name='price download scheme'),
        ),
        migrations.AddField(
            model_name='transactiontypeactioninstrument',
            name='price_download_scheme_input',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeInput'),
        ),
        migrations.AddField(
            model_name='transactiontypeactioninstrument',
            name='pricing_currency',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='currencies.Currency'),
        ),
        migrations.AddField(
            model_name='transactiontypeactioninstrument',
            name='pricing_currency_input',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='+', to='transactions.TransactionTypeInput'),
        ),
        migrations.AlterIndexTogether(
            name='transactiontypeaction',
            index_together=set([('transaction_type', 'order')]),
        ),
        migrations.AlterUniqueTogether(
            name='transactiontype',
            unique_together=set([('master_user', 'user_code')]),
        ),
        migrations.AlterIndexTogether(
            name='transactiontype',
            index_together=set([('master_user', 'is_deleted')]),
        ),
        migrations.AlterIndexTogether(
            name='transaction',
            index_together=set([('master_user', 'transaction_code')]),
        ),
        migrations.AlterUniqueTogether(
            name='eventtohandle',
            unique_together=set([('master_user', 'user_code')]),
        ),
        migrations.AlterIndexTogether(
            name='complextransaction',
            index_together=set([('transaction_type', 'code')]),
        ),
    ]
